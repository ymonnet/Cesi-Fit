/*! js-cookie v3.0.1 | MIT */
/* eslint-disable no-var */
function assign (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
      target[key] = source[key];
    }
  }
  return target
}
/* eslint-enable no-var */

/* eslint-disable no-var */
var defaultConverter = {
  read: function (value) {
    if (value[0] === '"') {
      value = value.slice(1, -1);
    }
    return value.replace(/(%[\dA-F]{2})+/gi, decodeURIComponent)
  },
  write: function (value) {
    return encodeURIComponent(value).replace(
      /%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,
      decodeURIComponent
    )
  }
};
/* eslint-enable no-var */

/* eslint-disable no-var */

function init (converter, defaultAttributes) {
  function set (key, value, attributes) {
    if (typeof document === 'undefined') {
      return
    }

    attributes = assign({}, defaultAttributes, attributes);

    if (typeof attributes.expires === 'number') {
      attributes.expires = new Date(Date.now() + attributes.expires * 864e5);
    }
    if (attributes.expires) {
      attributes.expires = attributes.expires.toUTCString();
    }

    key = encodeURIComponent(key)
      .replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent)
      .replace(/[()]/g, escape);

    var stringifiedAttributes = '';
    for (var attributeName in attributes) {
      if (!attributes[attributeName]) {
        continue
      }

      stringifiedAttributes += '; ' + attributeName;

      if (attributes[attributeName] === true) {
        continue
      }

      // Considers RFC 6265 section 5.2:
      // ...
      // 3.  If the remaining unparsed-attributes contains a %x3B (";")
      //     character:
      // Consume the characters of the unparsed-attributes up to,
      // not including, the first %x3B (";") character.
      // ...
      stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
    }

    return (document.cookie =
      key + '=' + converter.write(value, key) + stringifiedAttributes)
  }

  function get (key) {
    if (typeof document === 'undefined' || (arguments.length && !key)) {
      return
    }

    // To prevent the for loop in the first place assign an empty array
    // in case there are no cookies at all.
    var cookies = document.cookie ? document.cookie.split('; ') : [];
    var jar = {};
    for (var i = 0; i < cookies.length; i++) {
      var parts = cookies[i].split('=');
      var value = parts.slice(1).join('=');

      try {
        var foundKey = decodeURIComponent(parts[0]);
        jar[foundKey] = converter.read(value, foundKey);

        if (key === foundKey) {
          break
        }
      } catch (e) {}
    }

    return key ? jar[key] : jar
  }

  return Object.create(
    {
      set: set,
      get: get,
      remove: function (key, attributes) {
        set(
          key,
          '',
          assign({}, attributes, {
            expires: -1
          })
        );
      },
      withAttributes: function (attributes) {
        return init(this.converter, assign({}, this.attributes, attributes))
      },
      withConverter: function (converter) {
        return init(assign({}, this.converter, converter), this.attributes)
      }
    },
    {
      attributes: { value: Object.freeze(defaultAttributes) },
      converter: { value: Object.freeze(converter) }
    }
  )
}

var api = init(defaultConverter, { path: '/' });

//
var script = {
  name: "VueCookiesConsent",
  props: {
    /**
     * Color of window title
     */
    colorTitle: {
      type: String,
      default: "#1F2030"
    },

    /**
     * Color of window description
     */
    colorDescription: {
      type: String,
      default: "#4D4D4D"
    },

    /**
     * Color of button text
     */
    colorButton: {
      type: String,
      default: "#FFF"
    },

    /**
     * Background of window
     */
    backgroundWindow: {
      type: String,
      default: "#FFF"
    },

    /**
     * Background of button
     */
    backgroundButton: {
      type: String,
      default: "#C11E31"
    },

    /**
     * Background of button on hover state
     */
    backgroundButtonHover: {
      type: String,
      default: "#de2b40"
    },

    /**
     * Window has shadow
     */
    hasShadow: {
      type: Boolean,
      default: true
    },

    /**
     * Border radius of window in px
     */
    borderRadius: {
      type: Number,
      default: 16
    },

    /**
     * Position of window
     * @values top, bottom
     */
    position: {
      type: String,
      default: "bottom"
    },

    /**
     * Offset of window by Y in px
     */
    offsetY: {
      type: Number,
      default: 32
    },

    /**
     * Offset of window by X in px
     */
    offsetX: {
      type: Number,
      default: 32
    },

    /**
     * Method to save window state after accept
     * @values ls, cookies
     */
    saveMethod: {
      type: String,
      default: "ls"
    }
  },
  computed: {
    cssVars() {
      return {
        "--color-title": this.colorTitle,
        "--color-description": this.colorDescription,
        "--color-button": this.colorButton,
        "--background-window": this.backgroundWindow,
        "--background-button": this.backgroundButton,
        "--background-button-hover": this.backgroundButtonHover,
        "--border-radius": `${this.borderRadius}px`,
        "--offset-y": `${this.offsetY}px`,
        "--offset-x": `${this.offsetX}px`
      };
    },

    windowClasses() {
      return ["vcc-window", {
        "vcc-window--shadow": this.hasShadow,
        "vcc-window--top": this.position === "top"
      }];
    },

    hasTitleSlot() {
      return this.$slots.title;
    },

    hasDescriptionSlot() {
      return this.$slots.description;
    }

  },
  methods: {
    buttonClickHandler() {
      this.$emit("accept");

      if (this.saveMethod === "ls") {
        this.$emit("ls-saved");
        localStorage.setItem("vcc-window", "hide");
      }

      if (this.saveMethod === "cookies") {
        this.$emit("cookies-saved");
        api.set("vcc-window", "hide", {
          expires: 7,
          path: "*"
        });
      }

      this.showWindow = false;
      this.$emit("hidden");
    }

  },

  data() {
    return {
      showWindow: true
    };
  },

  created() {
    if (this.saveMethod === "cookies") {
      const cookiesHideWindow = api.get("vcc-window");

      if (cookiesHideWindow && cookiesHideWindow === "hide") {
        this.showWindow = false;
      } else {
        this.$emit("shown");
      }
    } else if (this.saveMethod === "ls") {
      const lsHideWindow = localStorage.getItem("vcc-window");

      if (lsHideWindow && lsHideWindow === "hide") {
        this.showWindow = false;
      } else {
        this.$emit("shown");
      }
    } else {
      this.$emit("shown");
    }
  }

};

function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    if (typeof shadowMode !== 'boolean') {
        createInjectorSSR = createInjector;
        createInjector = shadowMode;
        shadowMode = false;
    }
    // Vue.extend constructor export interop.
    const options = typeof script === 'function' ? script.options : script;
    // render functions
    if (template && template.render) {
        options.render = template.render;
        options.staticRenderFns = template.staticRenderFns;
        options._compiled = true;
        // functional template
        if (isFunctionalTemplate) {
            options.functional = true;
        }
    }
    // scopedId
    if (scopeId) {
        options._scopeId = scopeId;
    }
    let hook;
    if (moduleIdentifier) {
        // server build
        hook = function (context) {
            // 2.3 injection
            context =
                context || // cached call
                    (this.$vnode && this.$vnode.ssrContext) || // stateful
                    (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional
            // 2.2 with runInNewContext: true
            if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
                context = __VUE_SSR_CONTEXT__;
            }
            // inject component styles
            if (style) {
                style.call(this, createInjectorSSR(context));
            }
            // register component module identifier for async chunk inference
            if (context && context._registeredComponents) {
                context._registeredComponents.add(moduleIdentifier);
            }
        };
        // used by ssr in case component is cached and beforeCreate
        // never gets called
        options._ssrRegister = hook;
    }
    else if (style) {
        hook = shadowMode
            ? function (context) {
                style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
            }
            : function (context) {
                style.call(this, createInjector(context));
            };
    }
    if (hook) {
        if (options.functional) {
            // register for functional component in vue file
            const originalRender = options.render;
            options.render = function renderWithStyleInjection(h, context) {
                hook.call(context);
                return originalRender(h, context);
            };
        }
        else {
            // inject component registration as beforeCreate hook
            const existing = options.beforeCreate;
            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
    }
    return script;
}

const isOldIE = typeof navigator !== 'undefined' &&
    /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
function createInjector(context) {
    return (id, style) => addStyle(id, style);
}
let HEAD;
const styles = {};
function addStyle(id, css) {
    const group = isOldIE ? css.media || 'default' : id;
    const style = styles[group] || (styles[group] = { ids: new Set(), styles: [] });
    if (!style.ids.has(id)) {
        style.ids.add(id);
        let code = css.source;
        if (css.map) {
            // https://developer.chrome.com/devtools/docs/javascript-debugging
            // this makes source maps inside style tags work properly in Chrome
            code += '\n/*# sourceURL=' + css.map.sources[0] + ' */';
            // http://stackoverflow.com/a/26603875
            code +=
                '\n/*# sourceMappingURL=data:application/json;base64,' +
                    btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) +
                    ' */';
        }
        if (!style.element) {
            style.element = document.createElement('style');
            style.element.type = 'text/css';
            if (css.media)
                style.element.setAttribute('media', css.media);
            if (HEAD === undefined) {
                HEAD = document.head || document.getElementsByTagName('head')[0];
            }
            HEAD.appendChild(style.element);
        }
        if ('styleSheet' in style.element) {
            style.styles.push(code);
            style.element.styleSheet.cssText = style.styles
                .filter(Boolean)
                .join('\n');
        }
        else {
            const index = style.ids.size - 1;
            const textNode = document.createTextNode(code);
            const nodes = style.element.childNodes;
            if (nodes[index])
                style.element.removeChild(nodes[index]);
            if (nodes.length)
                style.element.insertBefore(textNode, nodes[index]);
            else
                style.element.appendChild(textNode);
        }
    }
}

/* script */
const __vue_script__ = script;
/* template */

var __vue_render__ = function () {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _vm.showWindow ? _c('div', {
    class: _vm.windowClasses,
    style: _vm.cssVars
  }, [_c('div', {
    staticClass: "vcc-window__grid"
  }, [_c('div', {
    staticClass: "vcc-window__content"
  }, [_vm.hasTitleSlot ? _c('p', {
    staticClass: "vcc-window__title"
  }, [_vm._t("title", function () {
    return [_vm._v("Default title")];
  })], 2) : _vm._e(), _vm._v(" "), _vm.hasDescriptionSlot ? _c('div', {
    staticClass: "vcc-window__description"
  }, [_vm._t("description", function () {
    return [_vm._v("\n          Default description on cookies window\n        ")];
  })], 2) : _vm._e()]), _vm._v(" "), _c('div', {
    staticClass: "vcc-window__action"
  }, [_c('button', {
    staticClass: "vcc-window__btn",
    attrs: {
      "type": "button"
    },
    on: {
      "click": _vm.buttonClickHandler
    }
  }, [_vm._t("button", function () {
    return [_vm._v("Accept cookies")];
  })], 2)])])]) : _vm._e();
};

var __vue_staticRenderFns__ = [];
/* style */

const __vue_inject_styles__ = function (inject) {
  if (!inject) return;
  inject("data-v-52db9004_0", {
    source: ".vcc-window{margin:0;border:0;font-size:100%;font-family:Calibri,sans-serif;vertical-align:baseline;position:fixed;background:var(--background-window);border-radius:var(--border-radius);padding:16px;bottom:var(--offset-y);left:var(--offset-x);right:var(--offset-x);box-sizing:border-box}.vcc-window *{box-sizing:border-box;margin:0;padding:0;font-size:100%}.vcc-window__grid{display:grid;grid-template-columns:1fr auto;column-gap:16px;align-items:center}.vcc-window__title{font-weight:700;font-size:20px;color:var(--color-title)}.vcc-window__description{font-size:16px;margin-top:8px;color:var(--color-description)}.vcc-window__btn{display:inline-flex;font-weight:500;font-size:16px;color:var(--color-button);text-align:center;text-decoration:none;vertical-align:middle;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;user-select:none;background-color:var(--background-button);border:1px solid transparent;height:50px;align-items:center;justify-content:center;border-radius:4px;transition:.4s ease;padding-right:32px;padding-left:32px}.vcc-window__btn:hover{background-color:var(--background-button-hover)}.vcc-window--shadow{box-shadow:0 0 20px 3px rgba(31,32,48,.15)}.vcc-window--top{top:var(--offset-y);bottom:auto}@media (max-width:840px){.vcc-window__grid{flex-direction:column;grid-template-columns:auto;gap:16px}}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


const __vue_scope_id__ = undefined;
/* module identifier */

const __vue_module_identifier__ = undefined;
/* functional template */

const __vue_is_functional_template__ = false;
/* style inject SSR */

/* style inject shadow dom */

const __vue_component__ = /*#__PURE__*/normalizeComponent({
  render: __vue_render__,
  staticRenderFns: __vue_staticRenderFns__
}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, createInjector, undefined, undefined);

// Import vue component
// IIFE injects install function into component, allowing component
// to be registered via Vue.use() as well as Vue.component(),

var entry_esm = /*#__PURE__*/(() => {
  // Get component instance
  const installable = __vue_component__; // Attach install function executed by Vue.use()

  installable.install = Vue => {
    Vue.component("VueCookiesConsent", installable);
  };

  return installable;
})(); // It's possible to expose named exports when writing components that can
// also be used as directives, etc. - eg. import { RollupDemoDirective } from 'rollup-demo';
// export const RollupDemoDirective = directive;

export { entry_esm as default };
