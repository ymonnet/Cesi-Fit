{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from 'axios';\nimport $storeUser from '@/store/user';\nexport default {\n  name: 'ValidateCartComponent',\n  props: {\n    restaurant: {},\n    cart: [],\n    totalPrice: null\n  },\n  data: () => ({\n    user: $storeUser.state.user,\n    rules: {\n      city: [v => !!v || 'Veuillez renseigner une ville'],\n      zipCode: [v => !!v || 'Veuillez renseigner un code postal', v => /[0-9].*$/.test(v) || 'Format incorrect'],\n      address: [v => !!v || 'Veuillez renseigner une adresse']\n    },\n    order: {\n      location: {\n        city: '',\n        zipCode: null,\n        address: ''\n      }\n    },\n    validCart: false,\n    validateCartDialog: false,\n    show1: true\n  }),\n  methods: {\n    removeAllFromCart(item) {\n      this.$store.commit('removeAllFromCart', item);\n    },\n\n    validateCart() {\n      const menus = [];\n      const products = [];\n\n      for (let i = 0; i < this.cart.length; i++) {\n        if (this.cart[i].products) {\n          menus.push({\n            item: this.cart[i],\n            quantity: this.cart[i].quantity\n          });\n        } else {\n          products.push({\n            item: this.cart[i],\n            quantity: this.cart[i].quantity\n          });\n        }\n      }\n\n      const order = {\n        menus: menus,\n        products: products,\n        restaurant: this.restaurant,\n        prices: {\n          orderPrice: this.totalPrice,\n          deliveryPrice: 2.99,\n          totalPrice: parseFloat(this.totalPrice) + 2.99\n        },\n        date: Date.now(),\n        orderState: 'En attente de préparation',\n        customerId: this.user.id,\n        location: {\n          city: this.order.location.city,\n          zipCode: this.order.location.zipCode,\n          address: this.order.location.address,\n          latitude: 0,\n          longitude: 0\n        }\n      };\n      axios.post('http://localhost:4400/api/v1/orders/', order).catch(error => console.log(error));\n      this.removeAllFromCart(this.restaurant);\n    },\n\n    cancelButtonClick() {\n      this.validateCartDialog = false;\n      this.$refs.cartForm.reset();\n    },\n\n    validateCartSubmit() {\n      if (this.validCart) {\n        this.$refs.cartForm.reset();\n        this.validateCartDialog = false;\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;AACA;AAEA;EACAA,6BADA;EAEAC;IACAC,cADA;IAEAC,QAFA;IAGAC;EAHA,CAFA;EAOAC;IACAC,2BADA;IAEAC;MACAC,OACAC,2CADA,CADA;MAIAC,UACAD,gDADA,EAEAA,6CAFA,CAJA;MAQAE,UACAF,6CADA;IARA,CAFA;IAcAG;MACAC;QACAL,QADA;QAEAE,aAFA;QAGAC;MAHA;IADA,CAdA;IAqBAG,gBArBA;IAsBAC,yBAtBA;IAuBAC;EAvBA,EAPA;EAgCAC;IACAC;MACA;IACA,CAHA;;IAIAC;MACA;MACA;;MACA;QACA;UACAC;YAAAC;YAAAC;UAAA;QACA,CAFA,MAEA;UACAC;YAAAF;YAAAC;UAAA;QACA;MACA;;MAEA;QACAF,YADA;QAEAG,kBAFA;QAGArB,2BAHA;QAIAsB;UACAC,2BADA;UAEAC,mBAFA;UAGAtB;QAHA,CAJA;QASAuB,gBATA;QAUAC,uCAVA;QAWAC,wBAXA;QAYAhB;UACAL,8BADA;UAEAE,oCAFA;UAGAC,oCAHA;UAIAmB,WAJA;UAKAC;QALA;MAZA;MAqBAC,0DACAC,KADA,CACAC,2BADA;MAGA;IACA,CAxCA;;IAyCAC;MACA;MACA;IACA,CA5CA;;IA6CAC;MACA;QACA;QACA;MACA;IACA;;EAlDA;AAhCA","names":["name","props","restaurant","cart","totalPrice","data","user","rules","city","v","zipCode","address","order","location","validCart","validateCartDialog","show1","methods","removeAllFromCart","validateCart","menus","item","quantity","products","prices","orderPrice","deliveryPrice","date","orderState","customerId","latitude","longitude","axios","catch","error","cancelButtonClick","validateCartSubmit"],"sourceRoot":"src/components/shop","sources":["ValidateCartComponent.vue"],"sourcesContent":["<template>\n  <v-dialog v-model=\"validateCartDialog\" max-width=\"600px\">\n    <template v-slot:activator=\"{ on, attrs }\">\n      <v-btn v-bind=\"attrs\" v-on=\"on\" color=\"primary\">Valider mon panier</v-btn>\n    </template>\n    <v-card>\n      <v-card-title>\n        <span class=\"text-h4\">Valider mon panier</span>\n      </v-card-title>\n      <v-form ref=\"cartForm\" v-model=\"validCart\" @submit.prevent=\"validateCartSubmit\">\n        <v-container>\n          <v-row>\n            <v-col cols=\"6\">\n              <v-text-field v-model=\"order.location.city\" :rules=\"rules.city\" label=\"Ville\"></v-text-field>\n            </v-col>\n            <v-col cols=\"6\">\n              <v-text-field v-model=\"order.location.zipCode\" :rules=\"rules.zipCode\" label=\"Code postal\"></v-text-field>\n            </v-col>\n          </v-row>\n          <v-row>\n            <v-col cols=\"12\">\n              <v-text-field v-model=\"order.location.address\" :rules=\"rules.address\" label=\"Adresse\"></v-text-field>\n            </v-col>\n          </v-row>\n        </v-container>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn @click=\"cancelButtonClick\">Fermer</v-btn>\n          <v-btn class=\"mr-4\" color=\"primary\" type=\"submit\" @click=\"validateCart\" :disabled=\"!validCart\">Valider</v-btn>\n        </v-card-actions>\n      </v-form>\n    </v-card>\n  </v-dialog>\n</template>\n\n<script>\nimport axios from 'axios'\nimport $storeUser from '@/store/user'\n\nexport default {\n  name: 'ValidateCartComponent',\n  props: {\n    restaurant: {},\n    cart: [],\n    totalPrice: null\n  },\n  data: () => ({\n    user: $storeUser.state.user,\n    rules: {\n      city: [\n        v => !!v || 'Veuillez renseigner une ville'\n      ],\n      zipCode: [\n        v => !!v || 'Veuillez renseigner un code postal',\n        v => /[0-9].*$/.test(v) || 'Format incorrect'\n      ],\n      address: [\n        v => !!v || 'Veuillez renseigner une adresse'\n      ]\n    },\n    order: {\n      location: {\n        city: '',\n        zipCode: null,\n        address: ''\n      }\n    },\n    validCart: false,\n    validateCartDialog: false,\n    show1: true\n  }),\n  methods: {\n    removeAllFromCart (item) {\n      this.$store.commit('removeAllFromCart', item)\n    },\n    validateCart () {\n      const menus = []\n      const products = []\n      for (let i = 0; i < this.cart.length; i++) {\n        if (this.cart[i].products) {\n          menus.push({ item: this.cart[i], quantity: this.cart[i].quantity })\n        } else {\n          products.push({ item: this.cart[i], quantity: this.cart[i].quantity })\n        }\n      }\n\n      const order = {\n        menus: menus,\n        products: products,\n        restaurant: this.restaurant,\n        prices: {\n          orderPrice: this.totalPrice,\n          deliveryPrice: 2.99,\n          totalPrice: parseFloat(this.totalPrice) + 2.99\n        },\n        date: Date.now(),\n        orderState: 'En attente de préparation',\n        customerId: this.user.id,\n        location: {\n          city: this.order.location.city,\n          zipCode: this.order.location.zipCode,\n          address: this.order.location.address,\n          latitude: 0,\n          longitude: 0\n        }\n      }\n\n      axios.post('http://localhost:4400/api/v1/orders/', order)\n        .catch(error => console.log(error))\n\n      this.removeAllFromCart(this.restaurant)\n    },\n    cancelButtonClick () {\n      this.validateCartDialog = false\n      this.$refs.cartForm.reset()\n    },\n    validateCartSubmit () {\n      if (this.validCart) {\n        this.$refs.cartForm.reset()\n        this.validateCartDialog = false\n      }\n    }\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}