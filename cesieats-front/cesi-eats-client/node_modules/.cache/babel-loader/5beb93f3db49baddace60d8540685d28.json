{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from 'axios';\nimport $storeUser from '@/store/user';\nexport default {\n  name: 'ValidateCartComponent',\n  props: {\n    restaurant: {},\n    cart: [],\n    totalPrice: null\n  },\n  data: function data() {\n    return {\n      user: $storeUser.state.user,\n      rules: {\n        city: [function (v) {\n          return !!v || 'Veuillez renseigner une ville';\n        }],\n        zipCode: [function (v) {\n          return !!v || 'Veuillez renseigner un code postal';\n        }, function (v) {\n          return /[0-9].*$/.test(v) || 'Format incorrect';\n        }],\n        address: [function (v) {\n          return !!v || 'Veuillez renseigner une adresse';\n        }]\n      },\n      order: {\n        location: {\n          city: '',\n          zipCode: null,\n          address: ''\n        }\n      },\n      validCart: false,\n      validateCartDialog: false,\n      show1: true\n    };\n  },\n  methods: {\n    removeAllFromCart: function removeAllFromCart(item) {\n      this.$store.commit('removeAllFromCart', item);\n    },\n    validateCart: function validateCart() {\n      var menus = [];\n      var products = [];\n\n      for (var i = 0; i < this.cart.length; i++) {\n        if (this.cart[i].products) {\n          menus.push({\n            item: this.cart[i],\n            quantity: this.cart[i].quantity\n          });\n        } else {\n          products.push({\n            item: this.cart[i],\n            quantity: this.cart[i].quantity\n          });\n        }\n      }\n\n      var order = {\n        menus: menus,\n        products: products,\n        restaurant: this.restaurant,\n        prices: {\n          orderPrice: this.totalPrice,\n          deliveryPrice: 2.99,\n          totalPrice: parseFloat(this.totalPrice) + 2.99\n        },\n        date: Date.now(),\n        orderState: 'En attente de préparation',\n        customerId: this.user.id,\n        location: {\n          city: this.order.location.city,\n          zipCode: this.order.location.zipCode,\n          address: this.order.location.address,\n          latitude: 0,\n          longitude: 0\n        }\n      };\n      axios.post('http://localhost:4400/api/v1/orders/', order).catch(function (error) {\n        return console.log(error);\n      });\n      this.removeAllFromCart(this.restaurant);\n    },\n    cancelButtonClick: function cancelButtonClick() {\n      this.validateCartDialog = false;\n      this.$refs.cartForm.reset();\n    },\n    validateCartSubmit: function validateCartSubmit() {\n      if (this.validCart) {\n        this.$refs.cartForm.reset();\n        this.validateCartDialog = false;\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;AACA;AAEA;EACAA,6BADA;EAEAC;IACAC,cADA;IAEAC,QAFA;IAGAC;EAHA,CAFA;EAOAC;IAAA;MACAC,2BADA;MAEAC;QACAC,OACA;UAAA;QAAA,CADA,CADA;QAIAC,UACA;UAAA;QAAA,CADA,EAEA;UAAA;QAAA,CAFA,CAJA;QAQAC,UACA;UAAA;QAAA,CADA;MARA,CAFA;MAcAC;QACAC;UACAJ,QADA;UAEAC,aAFA;UAGAC;QAHA;MADA,CAdA;MAqBAG,gBArBA;MAsBAC,yBAtBA;MAuBAC;IAvBA;EAAA,CAPA;EAgCAC;IACAC,iBADA,6BACAC,IADA,EACA;MACA;IACA,CAHA;IAIAC,YAJA,0BAIA;MACA;MACA;;MACA;QACA;UACAC;YAAAF;YAAAG;UAAA;QACA,CAFA,MAEA;UACAC;YAAAJ;YAAAG;UAAA;QACA;MACA;;MAEA;QACAD,YADA;QAEAE,kBAFA;QAGApB,2BAHA;QAIAqB;UACAC,2BADA;UAEAC,mBAFA;UAGArB;QAHA,CAJA;QASAsB,gBATA;QAUAC,uCAVA;QAWAC,wBAXA;QAYAhB;UACAJ,8BADA;UAEAC,oCAFA;UAGAC,oCAHA;UAIAmB,WAJA;UAKAC;QALA;MAZA;MAqBAC,0DACAC,KADA,CACA;QAAA;MAAA,CADA;MAGA;IACA,CAxCA;IAyCAC,iBAzCA,+BAyCA;MACA;MACA;IACA,CA5CA;IA6CAC,kBA7CA,gCA6CA;MACA;QACA;QACA;MACA;IACA;EAlDA;AAhCA","names":["name","props","restaurant","cart","totalPrice","data","user","rules","city","zipCode","address","order","location","validCart","validateCartDialog","show1","methods","removeAllFromCart","item","validateCart","menus","quantity","products","prices","orderPrice","deliveryPrice","date","orderState","customerId","latitude","longitude","axios","catch","cancelButtonClick","validateCartSubmit"],"sourceRoot":"src/components/shop","sources":["ValidateCartComponent.vue"],"sourcesContent":["<template>\n  <v-dialog v-model=\"validateCartDialog\" max-width=\"600px\">\n    <template v-slot:activator=\"{ on, attrs }\">\n      <v-btn v-bind=\"attrs\" v-on=\"on\" color=\"primary\">Valider mon panier</v-btn>\n    </template>\n    <v-card>\n      <v-card-title>\n        <span class=\"text-h4\">Valider mon panier</span>\n      </v-card-title>\n      <v-form ref=\"cartForm\" v-model=\"validCart\" @submit.prevent=\"validateCartSubmit\">\n        <v-container>\n          <v-row>\n            <v-col cols=\"6\">\n              <v-text-field v-model=\"order.location.city\" :rules=\"rules.city\" label=\"Ville\"></v-text-field>\n            </v-col>\n            <v-col cols=\"6\">\n              <v-text-field v-model=\"order.location.zipCode\" :rules=\"rules.zipCode\" label=\"Code postal\"></v-text-field>\n            </v-col>\n          </v-row>\n          <v-row>\n            <v-col cols=\"12\">\n              <v-text-field v-model=\"order.location.address\" :rules=\"rules.address\" label=\"Adresse\"></v-text-field>\n            </v-col>\n          </v-row>\n        </v-container>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn @click=\"cancelButtonClick\">Fermer</v-btn>\n          <v-btn class=\"mr-4\" color=\"primary\" type=\"submit\" @click=\"validateCart\" :disabled=\"!validCart\">Valider</v-btn>\n        </v-card-actions>\n      </v-form>\n    </v-card>\n  </v-dialog>\n</template>\n\n<script>\nimport axios from 'axios'\nimport $storeUser from '@/store/user'\n\nexport default {\n  name: 'ValidateCartComponent',\n  props: {\n    restaurant: {},\n    cart: [],\n    totalPrice: null\n  },\n  data: () => ({\n    user: $storeUser.state.user,\n    rules: {\n      city: [\n        v => !!v || 'Veuillez renseigner une ville'\n      ],\n      zipCode: [\n        v => !!v || 'Veuillez renseigner un code postal',\n        v => /[0-9].*$/.test(v) || 'Format incorrect'\n      ],\n      address: [\n        v => !!v || 'Veuillez renseigner une adresse'\n      ]\n    },\n    order: {\n      location: {\n        city: '',\n        zipCode: null,\n        address: ''\n      }\n    },\n    validCart: false,\n    validateCartDialog: false,\n    show1: true\n  }),\n  methods: {\n    removeAllFromCart (item) {\n      this.$store.commit('removeAllFromCart', item)\n    },\n    validateCart () {\n      const menus = []\n      const products = []\n      for (let i = 0; i < this.cart.length; i++) {\n        if (this.cart[i].products) {\n          menus.push({ item: this.cart[i], quantity: this.cart[i].quantity })\n        } else {\n          products.push({ item: this.cart[i], quantity: this.cart[i].quantity })\n        }\n      }\n\n      const order = {\n        menus: menus,\n        products: products,\n        restaurant: this.restaurant,\n        prices: {\n          orderPrice: this.totalPrice,\n          deliveryPrice: 2.99,\n          totalPrice: parseFloat(this.totalPrice) + 2.99\n        },\n        date: Date.now(),\n        orderState: 'En attente de préparation',\n        customerId: this.user.id,\n        location: {\n          city: this.order.location.city,\n          zipCode: this.order.location.zipCode,\n          address: this.order.location.address,\n          latitude: 0,\n          longitude: 0\n        }\n      }\n\n      axios.post('http://localhost:4400/api/v1/orders/', order)\n        .catch(error => console.log(error))\n\n      this.removeAllFromCart(this.restaurant)\n    },\n    cancelButtonClick () {\n      this.validateCartDialog = false\n      this.$refs.cartForm.reset()\n    },\n    validateCartSubmit () {\n      if (this.validCart) {\n        this.$refs.cartForm.reset()\n        this.validateCartDialog = false\n      }\n    }\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}